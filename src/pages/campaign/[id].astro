---
import PrimaryLayout from "../../layouts/PrimaryLayout.astro";

// Jalankan sebagai SSR agar semua ID bisa diakses tanpa pre-render
export const prerender = false;

// Ambil campaign berdasarkan params id secara runtime
const API_URL = import.meta.env.PUBLIC_API_URL;
const { id } = Astro.params;

let campaign: any = null;
try {
  const res = await fetch(`${API_URL}/campaigns/${id}`);
  if (res.ok) {
    campaign = await res.json();
  }
} catch (e) {
  // noop; akan dialihkan ke 404 di bawah
}

// Jika campaign tidak ditemukan dari props, redirect ke halaman 404
if (!campaign) {
  console.warn(`Campaign not found in props, redirecting to /404...`);
  return Astro.redirect("/404");
}

// Fungsi helper untuk parsing tanggal yang aman
const parseDate = (dateString: string) => {
  if (!dateString) return null;

  // Coba berbagai format tanggal
  const date = new Date(dateString);
  if (!isNaN(date.getTime())) {
    return date;
  }

  // Jika format ISO tidak bekerja, coba format lain
  const isoDate = new Date(dateString.replace(/\//g, "-"));
  if (!isNaN(isoDate.getTime())) {
    return isoDate;
  }

  return null;
};

// Hitung hari tersisa dengan validasi
const today = new Date();
const endDate = parseDate(campaign.endDate);
let daysLeft = 0;

if (endDate) {
  const timeDiff = endDate.getTime() - today.getTime();
  daysLeft = Math.max(0, Math.ceil(timeDiff / (1000 * 3600 * 24)));
} else {
  console.warn("Invalid end date:", campaign.endDate);
}

// Persentase donasi terkumpul dengan validasi
const currentAmount = campaign.currentAmount || 0;
const targetAmount = campaign.targetAmount || 1;
const percentageFunded = Math.min(
  Math.round((currentAmount / targetAmount) * 100),
  100
);

// Cek status kampanye
const isCampaignEnded = daysLeft <= 0;
const isTargetReached = currentAmount >= targetAmount;
const isCampaignActive = !isCampaignEnded && !isTargetReached;

// Format mata uang ke Rupiah
const formatCurrency = (amount: number) => {
  const numAmount = Number(amount) || 0;
  return new Intl.NumberFormat("id-ID", {
    style: "currency",
    currency: "IDR",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(numAmount);
};

// Format tanggal dengan validasi
const formatDate = (dateString: string) => {
  const date = parseDate(dateString);
  if (!date) {
    return "Tanggal tidak valid";
  }

  return new Intl.DateTimeFormat("id-ID", {
    day: "numeric",
    month: "long",
    year: "numeric",
  }).format(date);
};
---

<PrimaryLayout>
  <section class="w-full relative max-w-6xl mx-auto">
    <div
      class="w-full h-[300px] md:h-[400px] lg:h-[500px] bg-gray-300 relative overflow-hidden"
    >
      <img
        src={campaign.imageUrl}
        alt={campaign.title}
        class="w-full h-full object-cover"
      />
      <div
        class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end"
      >
        <div class="container mx-auto px-4 pb-8 md:pb-16">
          <span
            class="inline-block px-3 py-1 bg-blue-600 text-white text-sm rounded-full mb-4"
          >
            {campaign.category}
          </span>
          <h1
            class="text-white text-2xl md:text-4xl lg:text-5xl font-bold max-w-4xl"
          >
            {campaign.title}
          </h1>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Campaign Status Banner -->
  {isCampaignEnded && (
    <section class="max-w-6xl mx-auto px-4 mt-4 mb-6">
      <div class="bg-red-50 border border-red-200 rounded-lg p-4">
        <div class="flex items-center">
                     <div class="flex-shrink-0">
             <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
               <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
             </svg>
           </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">
              Kampanye Telah Berakhir
            </h3>
            <div class="mt-2 text-sm text-red-700">
              <p>Periode penggalangan dana untuk kampanye ini telah berakhir pada {formatDate(campaign.endDate)}.</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  )}
  
  {isTargetReached && !isCampaignEnded && (
    <section class="max-w-6xl mx-auto px-4 mt-4 mb-6">
      <div class="bg-green-50 border border-green-200 rounded-lg p-4">
        <div class="flex items-center">
                     <div class="flex-shrink-0">
             <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
               <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
             </svg>
           </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-green-800">
              Target Donasi Tercapai! 🎉
            </h3>
            <div class="mt-2 text-sm text-green-700">
              <p>Kampanye ini telah mencapai target donasi sebesar {formatCurrency(targetAmount)}. Terima kasih atas dukungan semua donatur!</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  )}
  
  <section class="max-w-6xl mx-auto py-8">
    <div class="lg:flex lg:space-x-8">
      <!-- Campaign Details -->
      <div class="lg:w-2/3 px-2">
        <div class="mb-6 flex flex-col gap-4">
          <div class="flex gap-2 md:gap-4">
            <p class="text-gray-600">
              Berakhir dalam <span class="font-semibold">{daysLeft} hari</span>
            </p>
          </div>
          <div class="flex items-center gap-2 bg-gray-200 rounded py-4 px-2">
            <img
              src={campaign.organizationLogo
                ? campaign.organizationLogo
                : "/images/icons/user-default.svg"}
              alt="Profil Organisasi"
              class="h-10 w-auto"
            />
            <p class="text-gray-600">Dibuat oleh <span class="font-semibold text-blue-600">{campaign.organizationName}</span></p>
          </div>
        </div>
        <h2 class="text-2xl font-bold mb-4">Deskripsi Kampanye</h2>
        <p class="text-gray-600 mb-6">{campaign.description}</p>
        
        <!-- Related News Section -->
        <div id="related-news" class="my-8">
          <h3 class="text-xl font-bold mb-4">Berita Terkait</h3>
          <div id="news-list" class="space-y-4">
            <!-- News items will be loaded here -->
          </div>
        </div>
      </div>
      
      <!-- Sticky Donation Card -->
      <div class="lg:w-1/3 px-2">
        <div class="sticky top-20">
          <div class="bg-gradient-to-br from-blue-50 to-indigo-50 border-2 border-blue-200 p-6 rounded-xl shadow-lg">
            <div class="p-6">
              <h2 class="text-2xl font-bold mb-4 text-blue-800 flex items-center">
                <svg class="w-6 h-6 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" />
                </svg>
                Bantu Sekarang
              </h2>
              
              <!-- Progress Section -->
              <div class="mb-6 bg-white p-4 rounded-lg shadow-sm">
                <div class="flex justify-between text-sm mb-2">
                  <span class="font-semibold text-blue-600"
                    >{formatCurrency(campaign.currentAmount)}</span
                  >
                  <span class="text-gray-500"
                    >dari {formatCurrency(campaign.targetAmount)}</span
                  >
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3 mb-3">
                  <div
                    class="bg-gradient-to-r from-blue-500 to-blue-600 h-3 rounded-full transition-all duration-500"
                    style={`width: ${percentageFunded}%`}
                  >
                  </div>
                </div>
                <div class="grid grid-cols-3 gap-2 text-center">
                  <div class="bg-blue-50 p-2 rounded-lg">
                    <p class="text-xs text-blue-600 font-medium">Terkumpul</p>
                    <p class="font-bold text-blue-800">{percentageFunded}%</p>
                  </div>
                  <div class="bg-green-50 p-2 rounded-lg">
                    <p class="text-xs text-green-600 font-medium">Donatur</p>
                    <p class="font-bold text-green-800">
                      {campaign.donorCount || 0}
                    </p>
                  </div>
                  <div class="bg-orange-50 p-2 rounded-lg">
                    <p class="text-xs text-orange-600 font-medium">Sisa Hari</p>
                    <p class="font-bold text-orange-800">{daysLeft}</p>
                  </div>
                </div>
              </div>

              <!-- Quick Amount Buttons -->
              <div class="mb-6">
                <p class="text-sm font-semibold text-gray-700 mb-3">Pilih Jumlah Donasi:</p>
                <div class="grid grid-cols-3 gap-2">
                  <button type="button" class="amount-btn bg-white border-2 border-gray-200 hover:border-blue-400 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-200" data-amount="25000">Rp 25K</button>
                  <button type="button" class="amount-btn bg-white border-2 border-gray-200 hover:border-blue-400 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-200" data-amount="50000">Rp 50K</button>
                  <button type="button" class="amount-btn bg-white border-2 border-gray-200 hover:border-blue-400 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-200" data-amount="100000">Rp 100K</button>
                  <button type="button" class="amount-btn bg-white border-2 border-gray-200 hover:border-blue-400 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-200" data-amount="250000">Rp 250K</button>
                  <button type="button" class="amount-btn bg-white border-2 border-gray-200 hover:border-blue-400 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-200" data-amount="500000">Rp 500K</button>
                  <button type="button" class="amount-btn bg-white border-2 border-gray-200 hover:border-blue-400 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-200" data-amount="1000000">Rp 1M</button>
                </div>
              </div>

              <!-- Progressive Disclosure Toggle -->
              <div class="mb-4">
                <button 
                  type="button" 
                  id="toggle-form-btn" 
                  class="w-full py-3 px-4 bg-white border-2 border-blue-300 text-blue-700 rounded-lg font-semibold hover:bg-blue-50 transition-all duration-200 flex items-center justify-center"
                >
                  <span id="toggle-text">Lanjutkan Donasi</span>
                  <svg id="toggle-icon" class="w-5 h-5 ml-2 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
              </div>

            <!-- Donation Form -->
            <form id="donate-form" class="space-y-4 hidden" data-campaign-id={campaign._id}>
              {!isCampaignActive && (
                <div class="mb-4 p-3 bg-gray-100 rounded-md">
                  <p class="text-sm text-gray-600 text-center">
                    {isCampaignEnded 
                      ? "Kampanye ini telah berakhir dan tidak dapat menerima donasi lagi." 
                      : "Target donasi telah tercapai. Terima kasih atas dukungan semua donatur!"}
                  </p>
                </div>
              )}
              
              <div>
                <label for="donor-name" class="block text-sm font-semibold text-gray-700 mb-2">Nama Donatur</label>
                <input
                  type="text"
                  id="donor-name"
                  name="donor-name"
                  class="mt-1 py-3 px-4 block w-full rounded-lg border-2 border-gray-200 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-200 disabled:bg-gray-100 disabled:cursor-not-allowed transition-all duration-200"
                  placeholder="Kosongkan jika ingin anonim"
                  disabled={!isCampaignActive}
                />
              </div>
              <div>
                <label for="donation-amount" class="block text-sm font-semibold text-gray-700 mb-2">Jumlah Donasi</label>
                <div class="relative">
                  <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium">Rp</span>
                  <input
                    type="text"
                    id="donation-amount"
                    name="donation-amount"
                    class="mt-1 py-3 pl-10 pr-4 block w-full rounded-lg border-2 border-gray-200 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-200 disabled:bg-gray-100 disabled:cursor-not-allowed transition-all duration-200"
                    placeholder="1.000.000"
                    required
                    disabled={!isCampaignActive}
                  />
                </div>
              </div>
              <div>
                <label for="donation-message" class="block text-sm font-semibold text-gray-700 mb-2">Pesan Donasi</label>
                <textarea
                  id="donation-message"
                  name="donation-message"
                  rows="3"
                  maxlength="500"
                  class="mt-1 py-3 px-4 block w-full rounded-lg border-2 border-gray-200 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-200 disabled:bg-gray-100 disabled:cursor-not-allowed transition-all duration-200 resize-none"
                  placeholder="Tuliskan pesan dukungan atau doa untuk kampanye ini (opsional)"
                  disabled={!isCampaignActive}
                ></textarea>
                <div class="mt-1 text-xs text-gray-500 text-right">
                  <span id="message-counter">0</span>/500 karakter
                </div>
              </div>
              <button
                type="submit"
                class={`w-full py-4 px-6 rounded-lg font-semibold text-lg transition-all duration-300 transform hover:scale-105 ${
                  isCampaignActive 
                    ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 shadow-lg hover:shadow-xl' 
                    : 'bg-gray-400 text-gray-200 cursor-not-allowed'
                }`}
                disabled={!isCampaignActive}
              >
                {isCampaignActive ? '💝 Lanjut ke Pembayaran' : '❌ Kampanye Tidak Aktif'}
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </section>
</PrimaryLayout>

<script>

  const API_URL = import.meta.env.PUBLIC_API_URL;
  const generateUniqueCode = () => {
    return Math.floor(100 + Math.random() * 900); // Kode unik 3 digit (100-999)
  };

  async function initiatePayment(
    amount: number,
    campaignId: string,
    donorName: string,
    message: string
  ) {
    const token = localStorage.getItem("token");
    if (!token) {
      alert("Silakan login untuk berdonasi.");
      return null;
    }

    try {
      const uniqueCode = generateUniqueCode();
      const totalAmount = amount + uniqueCode; // Menambahkan kode unik ke nominal donasi
      
      const response = await fetch(
        `${API_URL}/donations`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({
            campaignId,
            amount: totalAmount, // Menggunakan total amount yang sudah termasuk kode unik
            paymentMethod: "bank_transfer", // Default payment method
            donorName: donorName || "Anonymous",
            isAnonymous: !donorName,
            message: message || "",
            uniqueCode,
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Gagal memulai pembayaran");
      }

      const result = await response.json();
      window.location.href = `/payment/${result.donation.transactionId}`; // Alihkan ke halaman pembayaran dengan transactionId
      return result;
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("Error initiating payment:", error.message);
      } else {
        console.error("An unknown error occurred during payment initiation");
      }
      return null;
    }
  }

  // Load related news for campaign
  async function loadRelatedNews(campaignId: string) {
    try {
      const response = await fetch(`${API_URL}/news/campaign/${campaignId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch related news');
      }
      
      const data = await response.json();
      const newsList = document.getElementById('news-list');
      
      if (newsList && data.news && data.news.length > 0) {
        newsList.innerHTML = data.news.map((news: any) => `
          <div class="bg-white p-4 rounded-lg shadow-sm border">
            <div class="flex items-start space-x-3">
              <img 
                src="${news.image || '/images/empty-image-placeholder.webp'}" 
                alt="${news.title}"
                class="w-16 h-16 object-cover rounded"
              />
              <div class="flex-1">
                <h4 class="font-semibold text-gray-800 mb-1">
                  <a href="/news/${news.slug}" class="hover:text-blue-600 transition-colors">
                    ${news.title}
                  </a>
                </h4>
                <p class="text-sm text-gray-600 mb-2">
                  ${news.content.substring(0, 100)}${news.content.length > 100 ? '...' : ''}
                </p>
                <div class="flex items-center text-xs text-gray-500">
                  <span>${new Date(news.createdAt).toLocaleDateString('id-ID')}</span>
                  ${news.author?.nama ? `<span class="mx-2">•</span><span>${news.author.nama}</span>` : ''}
                </div>
              </div>
            </div>
          </div>
        `).join('');
      } else if (newsList) {
        newsList.innerHTML = '<p class="text-gray-500 text-center py-4">Belum ada berita terkait untuk kampanye ini.</p>';
      }
    } catch (error) {
      console.error('Error loading related news:', error);
      const newsList = document.getElementById('news-list');
      if (newsList) {
        newsList.innerHTML = '<p class="text-gray-500 text-center py-4">Gagal memuat berita terkait.</p>';
      }
    }
  }

  // Quick Amount Buttons functionality
  function setupQuickAmountButtons() {
    const amountButtons = document.querySelectorAll('.amount-btn');
    const amountInput = document.querySelector<HTMLInputElement>('#donation-amount');
    
    amountButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        amountButtons.forEach(btn => {
          btn.classList.remove('border-blue-500', 'bg-blue-100', 'text-blue-700');
          btn.classList.add('border-gray-200', 'bg-white');
        });
        
        // Add active class to clicked button
        button.classList.remove('border-gray-200', 'bg-white');
        button.classList.add('border-blue-500', 'bg-blue-100', 'text-blue-700');
        
        // Set amount input value with formatting
        const amount = button.getAttribute('data-amount');
        if (amountInput && amount) {
          const formattedAmount = parseInt(amount).toLocaleString('id-ID');
          amountInput.value = formattedAmount;
          amountInput.focus();
        }
        
        // Show form if hidden
        const donateForm = document.querySelector('#donate-form');
        const toggleBtn = document.querySelector('#toggle-form-btn');
        const toggleText = document.querySelector('#toggle-text');
        const toggleIcon = document.querySelector('#toggle-icon');
        
        if (donateForm && donateForm.classList.contains('hidden')) {
          donateForm.classList.remove('hidden');
          if (toggleText) toggleText.textContent = 'Sembunyikan Form';
          if (toggleIcon && toggleIcon instanceof HTMLElement) toggleIcon.style.transform = 'rotate(180deg)';
        }
      });
    });
  }

  // Progressive Disclosure functionality
  function setupProgressiveDisclosure() {
    const toggleBtn = document.querySelector('#toggle-form-btn');
    const donateForm = document.querySelector('#donate-form');
    const toggleText = document.querySelector('#toggle-text');
    const toggleIcon = document.querySelector('#toggle-icon');
    
    if (toggleBtn && donateForm && toggleText && toggleIcon) {
      toggleBtn.addEventListener('click', () => {
        if (donateForm.classList.contains('hidden')) {
          donateForm.classList.remove('hidden');
          toggleText.textContent = 'Sembunyikan Form';
          if (toggleIcon instanceof HTMLElement) toggleIcon.style.transform = 'rotate(180deg)';
        } else {
          donateForm.classList.add('hidden');
          toggleText.textContent = 'Lanjutkan Donasi';
          if (toggleIcon instanceof HTMLElement) toggleIcon.style.transform = 'rotate(0deg)';
        }
      });
    }
  }

  // Setup message character counter
  function setupMessageCounter() {
    const messageInput = document.querySelector<HTMLTextAreaElement>('#donation-message');
    const messageCounter = document.querySelector('#message-counter');
    
    if (messageInput && messageCounter) {
      messageInput.addEventListener('input', () => {
        const currentLength = messageInput.value.length;
        messageCounter.textContent = currentLength.toString();
        
        // Change color based on character count
        if (currentLength > 450) {
          messageCounter.classList.add('text-red-500');
          messageCounter.classList.remove('text-gray-500');
        } else if (currentLength > 400) {
          messageCounter.classList.add('text-orange-500');
          messageCounter.classList.remove('text-gray-500', 'text-red-500');
        } else {
          messageCounter.classList.add('text-gray-500');
          messageCounter.classList.remove('text-orange-500', 'text-red-500');
        }
      });
    }
  }

  // Format currency input with thousand separators
  function setupCurrencyFormatting() {
    const amountInput = document.querySelector<HTMLInputElement>('#donation-amount');
    
    if (amountInput) {
      // Function to format number with thousand separators
      const formatNumber = (value: string) => {
        const numValue = value.replace(/[^0-9]/g, '');
        if (!numValue) return '';
        
        const number = parseInt(numValue);
        return number.toLocaleString('id-ID');
      };

      // Function to parse formatted number back to integer
      const parseFormattedNumber = (value: string) => {
        return parseInt(value.replace(/[^0-9]/g, '')) || 0;
      };

      // Track if user is actively typing
      let isUserTyping = false;

      amountInput.addEventListener('focus', () => {
        // Clear the field when user focuses (if it contains default value)
        if (amountInput.value === '1.000' || amountInput.value === '') {
          amountInput.value = '';
          isUserTyping = true;
        }
      });

      amountInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        isUserTyping = true;
        
        // Get cursor position before formatting
        const cursorPosition = target.selectionStart || 0;
        const oldLength = target.value.length;
        
        // Format the value
        const formattedValue = formatNumber(target.value);
        target.value = formattedValue;
        
        // Calculate new cursor position
        const newLength = formattedValue.length;
        const lengthDiff = newLength - oldLength;
        const newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
        
        // Set cursor position after formatting
        setTimeout(() => {
          target.setSelectionRange(newCursorPosition, newCursorPosition);
        }, 0);
      });
      
      amountInput.addEventListener('blur', (e) => {
        const target = e.target as HTMLInputElement;
        const parsedValue = parseFormattedNumber(target.value);
        
        // Only set default if field is empty or user hasn't typed anything
        if (!isUserTyping && (parsedValue === 0 || target.value === '')) {
          target.value = '1.000';
        } else if (parsedValue > 0 && parsedValue < 1000) {
          target.value = '1.000';
        } else if (parsedValue >= 1000) {
          target.value = parsedValue.toLocaleString('id-ID');
        }
        
        isUserTyping = false;
      });

      // Handle paste events
      amountInput.addEventListener('paste', (e) => {
        e.preventDefault();
        const pasteData = e.clipboardData?.getData('text') || '';
        const formattedValue = formatNumber(pasteData);
        amountInput.value = formattedValue;
        isUserTyping = true;
      });

      // Handle keydown to detect when user starts typing
      amountInput.addEventListener('keydown', () => {
        isUserTyping = true;
      });
    }
  }

  window.addEventListener("load", () => {
    // Setup all new functionality
    setupQuickAmountButtons();
    setupProgressiveDisclosure();
    setupCurrencyFormatting();
    setupMessageCounter();

    const donateForm = document.querySelector("#donate-form");
    if (donateForm) {
      console.log("Donate form found, adding event listener...");
      donateForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const amountInput = document.querySelector<HTMLInputElement>("#donation-amount");
        const donorNameInput = document.querySelector<HTMLInputElement>("#donor-name");
        const messageInput = document.querySelector<HTMLTextAreaElement>("#donation-message");

        if (!amountInput || !donorNameInput || !messageInput) {
          console.error("Required form elements not found");
          return;
        }

        // Parse the formatted amount back to number
        const formattedAmount = amountInput.value;
        const amount = parseInt(formattedAmount.replace(/[^0-9]/g, '')) || 0;
        const donorName = donorNameInput.value;
        const message = messageInput.value;
        const campaignId = donateForm.getAttribute("data-campaign-id");

        if (amount < 1000) {
          alert("Minimum donasi adalah Rp 1.000");
          return;
        }

        if (!campaignId) {
          alert("ID kampanye tidak ditemukan.");
          return;
        }

        const result = await initiatePayment(amount, campaignId, donorName, message);
        console.log("Payment initiation response:", result);
      });
    } else {
      console.error("Form donasi tidak ditemukan di DOM");
    }

    // Load related news when page loads
    const campaignId = document.querySelector('#donate-form')?.getAttribute('data-campaign-id');
    if (campaignId) {
      loadRelatedNews(campaignId);
    }
  });
</script>
