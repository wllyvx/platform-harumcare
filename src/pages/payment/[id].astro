---
import PrimaryLayout from "../../layouts/PrimaryLayout.astro";

const bankAccount = "123456789";

const handleCopyAccount = () => {
    navigator.clipboard.writeText(bankAccount);
  };

export const prerender = false;
---

<PrimaryLayout>
  <section class="w-full relative max-w-xl mx-auto py-8">
    <div class="px-8 text-center">
      <h1 class="text-3xl font-bold mb-1">Selesaikan Donasi Anda</h1>
      <p class="mb-6">Transfer ke nomor rekening kami di bawah ini lalu upload bukti transfer</p>
    </div>
    <div id="payment-details" class="bg-white border border-gray-200 p-6 rounded-lg mb-6 hidden">
      <h2 class="text-xl font-semibold mb-4">Detail Pembayaran</h2>
      <div class="mb-4">
        <p class="text-gray-700 mb-2">Nomor Rekening:</p>
        <div class="flex gap-5">
          <p id="account-number" class="rounded-md bg-gray-100 border border-gray-200 p-4 w-full font-medium text-2xl">{bankAccount}</p>          
          <button id="copy-account" class="bg-gray-500 text-white px-2 py-0 rounded-md hover:bg-gray-600 transition-colors duration-200">Copy</button>
        </div>
      </div>
      <div class="mb-4">
        <p class="text-gray-700 mb-2">Jumlah Transfer:</p>
        <div class="flex justify-between gap-5">
          <p id="total-amount" class="bg-green-100 p-4 w-full rounded-md border border-green-300 font-bold text-4xl text-green-500"></p>
          <button id="copy-amount" class="bg-gray-500 text-white px-2 py-0 rounded-md hover:bg-gray-600 transition">Copy</button>
        </div>
        <p class="text-sm text-gray-500 mt-2">*Sudah termasuk kode unik</p>
      </div>
      <div class="mb-4">
        <p class="text-gray-700 mb-2">Rincian:</p>
        <div class="bg-gray-50 p-4 rounded-md">
          <div class="flex justify-between mb-2">
            <span>Nominal Donasi</span>
            <span id="donation-amount" class="font-medium"></span>
          </div>
          <div class="flex justify-between">
            <span>Kode Unik</span>
            <span id="unique-code" class="font-medium text-blue-600"></span>
          </div>
        </div>
      </div>
      <div class="bg-sky-500/10 border border-sky-400 text-sky-800 py-4 px-2 rounded-md">
        <p class="font-bold text-xl mb-2">Instruksi Transfer:</p>
        <ul class="list-disc px-4">
          <li>Transfer sesuai <span class="italic">jumlah tepat</span> yang tertera di atas <span class="font-semibold">(termasuk kode unik)</span></li>
          <li>Cantumkan <span class="font-semibold">nama Anda</span> pada deskripsi transfer</li>
          <li>Simpan <span class="font-semibold">bukti transfer</span> untuk diunggah pada formulir di bawah</li>
        </ul>
      </div>
    </div>
    <div id="loading" class="text-center">Memuat data donasi...</div>
    <div id="error" class="bg-red-100 p-6 rounded-lg text-center hidden">
      <p class="text-red-700">Gagal memuat data donasi. Silakan coba lagi atau hubungi admin.</p>
    </div>

    <form id="upload-proof-form" class="bg-white rounded-md p-8 space-y-4 hidden border border-gray-200" data-donation-id="" data-campaign-id="">
      <div class="">
        <label for="proof-input" class="block text-xl font-semibold">Unggah Bukti Transfer</label>
        <input
          type="file"
          id="proof-input"
          name="proof"
          accept="image/*"
          class="mt-1 p-4 block w-full bg-stone-200 rounded-md border border-dashed border-stone-400 shadow-sm focus:border-blue-500 focus:ring-blue-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
          required
        />
        <div id="proof-preview" class="hidden mt-4">
          <img id="preview-proof" src="" alt="Preview" class="w-full max-w-xs mx-auto rounded-lg shadow-md" />
          <p class="text-sm text-gray-500 text-center mt-2">Pratinjau Bukti Transfer</p>
        </div>
      </div>
      <button
        type="submit"
        class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300"
      >
        Kirim Bukti Transfer
      </button>
    </form>
  </section>
</PrimaryLayout>

<script>
  const url = new URL(window.location.href);
  const transactionId = url.pathname.split('/').pop();
  console.log("Fetching donation with transactionId:", transactionId);

  const API_URL = import.meta.env.PUBLIC_API_URL;


  async function fetchDonation() {
    const loading = document.getElementById("loading");
    const error = document.getElementById("error");
    const paymentDetails = document.getElementById("payment-details");
    const uploadForm = document.getElementById("upload-proof-form");

    if (!loading || !error || !paymentDetails || !uploadForm) {
      console.error("Required DOM elements not found");
      return;
    }

    loading.classList.remove("hidden");
    paymentDetails.classList.add("hidden");
    error.classList.add("hidden");
    uploadForm.classList.add("hidden");

    try {
      const token = localStorage.getItem("token");
      if (!token) {
        throw new Error("Token autentikasi tidak ditemukan. Silakan login.");
      }

      const response = await fetch(`${API_URL}/donations/transaction/${transactionId}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`Fetch error: ${response.status} ${response.statusText}`);
      }

      const donation = await response.json();

      const formatCurrency = (amount: number) => {
        return new Intl.NumberFormat("id-ID", {
          style: "currency",
          currency: "IDR",
          minimumFractionDigits: 0,
          maximumFractionDigits: 0,
        }).format(amount);
      };

      const uniqueCode = donation.uniqueCode || 0;
      const baseAmount = donation.amount - uniqueCode;
      
      const totalAmountElement = document.getElementById("total-amount");
      const donationAmountElement = document.getElementById("donation-amount");
      const uniqueCodeElement = document.getElementById("unique-code");
      const uploadFormElement = document.querySelector("#upload-proof-form");

      if (!totalAmountElement || !donationAmountElement || !uniqueCodeElement || !uploadFormElement) {
        throw new Error("Required DOM elements for displaying donation details not found");
      }

      totalAmountElement.textContent = formatCurrency(donation.amount);
      donationAmountElement.textContent = formatCurrency(baseAmount);
      uniqueCodeElement.textContent = uniqueCode.toString();
      uploadFormElement.setAttribute("data-donation-id", donation._id);
      uploadFormElement.setAttribute("data-campaign-id", donation.campaignId);

      loading.classList.add("hidden");
      paymentDetails.classList.remove("hidden");
      uploadForm.classList.remove("hidden");
    } catch (error: unknown) {
      console.error("Error fetching donation:", error instanceof Error ? error.message : "Unknown error");
      loading.classList.add("hidden");
      error.classList.remove("hidden");
    }
  }

  function setupImagePreview(inputId: string, previewId: string, imgId: string) {
    const input = document.getElementById(inputId) as HTMLInputElement;
    const preview = document.getElementById(previewId);
    const img = document.getElementById(imgId) as HTMLImageElement;

    if (input && preview && img) {
      input.addEventListener("change", function (e: Event) {
        const target = e.target as HTMLInputElement;
        const file = target.files?.[0];
        
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            if (e.target?.result && typeof e.target.result === 'string') {
              img.src = e.target.result;
              preview.classList.remove("hidden");
            }
          };
          reader.readAsDataURL(file);
        } else {
          preview.classList.add("hidden");
        }
      });
    }
  }

  async function uploadImage(file: File) {
    try {
      const formData = new FormData();
      formData.append("image", file);

      const token = localStorage.getItem("token");
      const response = await fetch(`${API_URL}/upload`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!response.ok) {
        throw new Error("Failed to upload proof of transfer");
      }

      const result = await response.json();
      return result.imageUrl;
    } catch (error: unknown) {
      console.error("Error uploading proof:", error instanceof Error ? error.message : "Unknown error");
      return null;
    }
  }

  async function updateDonationWithProof(donationId: string, proofUrl: string) {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`${API_URL}/donations/${donationId}/proof`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ proofOfTransfer: proofUrl }),
      });

      if (!response.ok) {
        throw new Error("Failed to update donation with proof");
      }

      return await response.json();
    } catch (error: unknown) {
      console.error("Error updating donation:", error instanceof Error ? error.message : "Unknown error");
      return null;
    }
  }

  window.addEventListener("load", () => {
    fetchDonation();
    setupImagePreview("proof-input", "proof-preview", "preview-proof");

    // Setup copy buttons
    const copyAccount = document.getElementById("copy-account");
    const copyAmount = document.getElementById("copy-amount");
    const accountNumber = document.getElementById("account-number");
    const totalAmount = document.getElementById("total-amount");

    async function copyToClipboard(text: string, button: HTMLButtonElement) {
      try {
        await navigator.clipboard.writeText(text);
        const originalText = button.textContent;
        button.textContent = "Tersalin!";
        button.classList.remove("bg-gray-500");
        button.classList.add("bg-green-500", "hover:bg-green-500");
        
        setTimeout(() => {
          button.textContent = originalText;
          button.classList.remove("bg-green-500", "hover:bg-green-500");
          button.classList.add("bg-gray-500");
        }, 2000);
      } catch (err) {
        console.error("Gagal menyalin teks:", err);
        alert("Gagal menyalin teks. Silakan coba lagi.");
      }
    }

    copyAccount?.addEventListener("click", () => {
      if (accountNumber) {
        copyToClipboard(accountNumber.textContent || "", copyAccount as HTMLButtonElement);
      }
    });

    copyAmount?.addEventListener("click", () => {
      if (totalAmount) {
        // Hapus format mata uang sebelum menyalin
        const amount = totalAmount.textContent?.replace(/[^0-9]/g, "") || "";
        copyToClipboard(amount, copyAmount as HTMLButtonElement);
      }
    });

    const uploadForm = document.querySelector("#upload-proof-form");
    if (uploadForm) {
      uploadForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const proofInput = document.querySelector("#proof-input") as HTMLInputElement;
        const file = proofInput?.files?.[0];
        
        if (!file) {
          alert("Harap unggah bukti transfer.");
          return;
        }

        const donationId = uploadForm.getAttribute("data-donation-id");
        const campaignId = uploadForm.getAttribute("data-campaign-id");

        if (!donationId || !campaignId) {
          alert("Data donasi tidak lengkap.");
          return;
        }

        const proofUrl = await uploadImage(file);
        if (!proofUrl) {
          alert("Gagal mengunggah bukti transfer. Coba lagi.");
          return;
        }

        const updatedDonation = await updateDonationWithProof(donationId, proofUrl);
        if (updatedDonation) {
          alert("Bukti transfer berhasil diunggah. Menunggu konfirmasi admin.");
          window.location.href = `/`;
        } else {
          alert("Gagal memperbarui donasi. Coba lagi.");
        }
      });
    }
  });
</script>