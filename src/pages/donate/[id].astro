---
import PrimaryLayout from "../../layouts/PrimaryLayout.astro";
import type { ObjectId } from "mongoose";

// Ekspor getStaticPaths
export async function getStaticPaths() {
  console.log("Starting getStaticPaths execution for donate page...");

  try {
    console.log("Attempting to fetch campaign list from http://localhost:3000/api/campaigns...");
    const response = await fetch("http://localhost:3000/api/campaigns");

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}, ${response.statusText}`);
    }

    const data = await response.json();
    const campaigns = data.campaigns;

    if (!campaigns || campaigns.length === 0) {
      console.warn("No campaigns found, returning empty paths array");
      return [];
    }

    return campaigns.map((campaign) => ({
      params: { id: campaign._id.toString() },
      props: { campaign },
    }));
  } catch (error) {
    console.error("Failed to fetch campaign list:", error.message);
    return [];
  }
}

interface Props {
  campaign: {
    _id: ObjectId;
    title: string;
    description: string;
    imageUrl: string;
    targetAmount: number;
    currentAmount: number;
    endDate: string;
    donorCount: number;
    organizationName: string;
    organizationLogo: string;
    category: string;
  };
}

const { campaign } = Astro.props;

if (!campaign) {
  console.warn(`Campaign not found in props, redirecting to /404...`);
  return Astro.redirect("/404");
}

// Fungsi helper untuk parsing tanggal yang aman
const parseDate = (dateString) => {
  if (!dateString) return null;
  const date = new Date(dateString);
  if (!isNaN(date.getTime())) return date;
  return null;
};

// Hitung hari tersisa
const today = new Date();
const endDate = parseDate(campaign.endDate);
let daysLeft = 0;
if (endDate) {
  const timeDiff = endDate.getTime() - today.getTime();
  daysLeft = Math.max(0, Math.ceil(timeDiff / (1000 * 3600 * 24)));
}

// Persentase donasi terkumpul
const currentAmount = campaign.currentAmount || 0;
const targetAmount = campaign.targetAmount || 1;
const percentageFunded = Math.min(Math.round((currentAmount / targetAmount) * 100), 100);

// Format mata uang ke Rupiah
const formatCurrency = (amount) => {
  return new Intl.NumberFormat("id-ID", {
    style: "currency",
    currency: "IDR",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
};
---

<PrimaryLayout>
  <section class="w-full relative max-w-6xl mx-auto py-8">
    <h1 class="text-3xl font-bold mb-6">{campaign.title}</h1>
    <p class="text-gray-600 mb-4">Donasi untuk kampanye: {campaign.title}</p>
    <div class="mb-6">
      <div class="flex justify-between text-sm mb-2">
        <span class="font-semibold text-blue-600">{formatCurrency(campaign.currentAmount)}</span>
        <span class="text-gray-500">dari {formatCurrency(campaign.targetAmount)}</span>
      </div>
      <div class="w-full bg-gray-200 rounded-full h-2.5">
        <div class="bg-blue-600 h-2.5 rounded-full" style={`width: ${percentageFunded}%`}></div>
      </div>
    </div>

    <form id="donate-form" class="space-y-4" data-campaign-id={campaign._id}>
      <div>
        <label for="donor-name" class="block text-sm font-medium text-gray-700">Nama Donatur</label>
        <input
          type="text"
          id="donor-name"
          name="donor-name"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          placeholder="Masukkan nama Anda (opsional)"
        />
      </div>
      <div>
        <label for="donation-amount" class="block text-sm font-medium text-gray-700">Jumlah Donasi</label>
        <input
          type="number"
          id="donation-amount"
          name="donation-amount"
          min="1000"
          step="1000"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
      </div>
      <div>
        <label for="payment-method" class="block text-sm font-medium text-gray-700">Metode Pembayaran</label>
        <select
          id="payment-method"
          name="payment-method"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        >
          <option value="">Pilih metode pembayaran</option>
          <option value="bank_transfer">Transfer Bank</option>
          <option value="e_wallet">E-Wallet</option>
          <option value="credit_card">Kartu Kredit</option>
        </select>
      </div>
      <button
        type="submit"
        class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300"
      >
        Kirim Donasi
      </button>
    </form>
  </section>
</PrimaryLayout>

<script>
  async function donate(amount, campaignId, paymentMethod, donorName) {
    const token = localStorage.getItem("token");
    if (!token) {
      alert("Silakan login untuk berdonasi.");
      return null;
    }

    try {
      const response = await fetch(
        `http://localhost:3000/api/campaigns/${campaignId}/donate`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({
            campaignId,
            amount,
            paymentMethod,
            donorName: donorName || "Anonymous",
            isAnonymous: !donorName,
            message: "",
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Gagal memproses donasi");
      }

      const result = await response.json();
      return result;
    } catch (error) {
      console.error("Error donating:", error.message);
      return null;
    }
  }

  window.addEventListener("load", () => {
    const donateForm = document.querySelector("#donate-form");
    if (donateForm) {
      console.log("Donate form found, adding event listener...");
      donateForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const amountInput = document.querySelector("#donation-amount");
        const paymentMethodInput = document.querySelector("#payment-method");
        const donorNameInput = document.querySelector("#donor-name");
        const amount = Number(amountInput.value);
        const paymentMethod = paymentMethodInput.value;
        const donorName = donorNameInput.value;
        const campaignId = donateForm.getAttribute("data-campaign-id");

        if (amount < 1000) {
          alert("Minimum donation is IDR 1,000.");
          return;
        }

        if (!paymentMethod) {
          alert("Please select a payment method.");
          return;
        }

        if (!campaignId) {
          alert("Campaign ID not found.");
          return;
        }

        const result = await donate(amount, campaignId, paymentMethod, donorName);
        console.log("Donation response:", result);

        if (
          result &&
          result.message === "Donasi telah dikirim dan menunggu approval dari admin"
        ) {
          alert(result.message);
          window.location.href = `/campaign/${campaignId}`; // Kembali ke halaman campaign
        } else {
          alert(result?.error || "Gagal memproses donasi. Coba lagi.");
        }
      });
    } else {
      console.error("Donate form not found in DOM");
    }
  });
</script>