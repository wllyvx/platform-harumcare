---
import AdminLayout from "../../../layouts/AdminLayout.astro"
---

<AdminLayout title="Tambah Berita Baru">
  <div class="container mx-auto py-6">
    <!-- Header -->
    <div class="mb-6">
      <h1 class="text-2xl font-semibold text-gray-900">Tambah Berita Baru</h1>
      <p class="mt-1 text-sm text-gray-600">Buat berita baru untuk ditampilkan di website.</p>
    </div>

    <!-- Form -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
      <form id="createNewsForm" class="p-6 space-y-6">
        <!-- Title -->
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700 mb-1">
            Judul Berita <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="title"
            name="title"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Masukkan judul berita..."
          />
        </div>

        <!-- Content -->
        <div>
          <label for="content" class="block text-sm font-medium text-gray-700 mb-1">
            Konten Berita <span class="text-red-500">*</span>
          </label>
          <div class="border border-gray-300 rounded-lg p-2">
            <textarea
              id="content"
              name="content"
              required
              rows="12"
              class="w-full px-3 py-2 border-0 focus:ring-0"
              placeholder="Tulis konten berita di sini..."
            ></textarea>
                         <div class="border-t pt-2 flex justify-end space-x-2">
               <button type="button" id="boldBtn" class="px-3 py-1 text-sm border rounded hover:bg-gray-50">
                 <strong>B</strong>
               </button>
               <button type="button" id="italicBtn" class="px-3 py-1 text-sm border rounded hover:bg-gray-50">
                 <em>I</em>
               </button>
               <button type="button" id="underlineBtn" class="px-3 py-1 text-sm border rounded hover:bg-gray-50">
                 <u>U</u>
               </button>
               <button type="button" id="bulletListBtn" class="px-3 py-1 text-sm border rounded hover:bg-gray-50">
                 â€¢ List
               </button>
               <button type="button" id="numberListBtn" class="px-3 py-1 text-sm border rounded hover:bg-gray-50">
                 1. List
               </button>
             </div>
          </div>
          <p class="mt-1 text-sm text-gray-500">
            Tip: Gunakan tombol format di atas untuk mempercantik teks
          </p>
        </div>

        <!-- Image Upload -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">
            Gambar Berita
          </label>
          <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg">
            <div class="space-y-1 text-center">
              <div class="flex flex-col items-center">
                <img id="imagePreview" class="hidden mb-4 max-h-48 rounded" />
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
              </div>
              <div class="flex text-sm text-gray-600">
                <label for="image" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                  <span>Upload gambar</span>
                                     <input id="image" name="image" type="file" class="sr-only" accept="image/*"/>
                </label>
                <p class="pl-1">atau drag and drop</p>
              </div>
              <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
            </div>
          </div>
        </div>

        <!-- Category and Status -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 mb-1">
              Kategori <span class="text-red-500">*</span>
            </label>
            <div class="space-y-2">
                             <select
                 id="category"
                 name="category"
                 required
                 class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
               >
                 <option value="">Pilih Kategori</option>
               </select>
              
              <!-- Custom Category Input (hidden by default) -->
              <div id="customCategoryInput" class="hidden">
                <input
                  type="text"
                  id="customCategory"
                  name="customCategory"
                  placeholder="Masukkan nama kategori baru..."
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
                <p class="mt-1 text-xs text-gray-500">Kategori baru akan ditambahkan ke daftar kategori</p>
              </div>
            </div>
          </div>

          <div>
            <label for="status" class="block text-sm font-medium text-gray-700 mb-1">
              Status <span class="text-red-500">*</span>
            </label>
            <select
              id="status"
              name="status"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="draft">Draft</option>
              <option value="published">Published</option>
            </select>
          </div>
        </div>

        <!-- Related Campaign -->
        <div>
          <label for="campaignId" class="block text-sm font-medium text-gray-700 mb-1">
            Kampanye Terkait (Opsional)
          </label>
          <select
            id="campaignId"
            name="campaignId"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Tidak ada kampanye terkait</option>
          </select>
          <p class="mt-1 text-sm text-gray-500">
            Pilih kampanye jika berita ini terkait dengan kampanye tertentu
          </p>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-3 pt-6 border-t">
          <a 
            href="/admin/news"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Batal
          </a>
          <button
            type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Simpan Berita
          </button>
        </div>
      </form>
    </div>
  </div>
</AdminLayout>

<script>
  const API_URL = import.meta.env.PUBLIC_API_URL;
  let imageFile: File | null = null;

  // Image preview
  function previewImage(event: Event) {
    const input = event.target as HTMLInputElement;
    const preview = document.getElementById('imagePreview') as HTMLImageElement;
    
    if (input.files && input.files[0]) {
      imageFile = input.files[0];
      const reader = new FileReader();
      
      reader.onload = function(e) {
        preview.src = e.target?.result as string;
        preview.classList.remove('hidden');
      }
      
      reader.readAsDataURL(input.files[0]);
    }
  }

  // Load categories from API
  async function loadCategories() {
    try {
      const response = await fetch(`${API_URL}/news/categories`);
      if (response.ok) {
        const categories = await response.json();
        const categorySelect = document.getElementById('category') as HTMLSelectElement;
        
        if (categorySelect) {
          // Clear existing options except the first one
          categorySelect.innerHTML = '<option value="">Pilih Kategori</option>';
          
          // Add existing categories
          categories.forEach((category: string) => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
            categorySelect.appendChild(option);
          });
          
          // Add custom option
          const customOption = document.createElement('option');
          customOption.value = 'custom';
          customOption.textContent = '+ Tambah Kategori Baru';
          categorySelect.appendChild(customOption);
        }
      }
    } catch (error) {
      console.error('Error loading categories:', error);
    }
  }

  // Load campaigns from API
  async function loadCampaigns() {
    try {
      const response = await fetch(`${API_URL}/campaigns`);
      if (response.ok) {
        const data = await response.json();
        const campaigns = data.campaigns || [];
        const campaignSelect = document.getElementById('campaignId') as HTMLSelectElement;
        
        if (campaignSelect) {
          // Clear existing options except the first one
          campaignSelect.innerHTML = '<option value="">Tidak ada kampanye terkait</option>';
          
          // Add campaign options
          campaigns.forEach((campaign: any) => {
            const option = document.createElement('option');
            option.value = campaign._id;
            option.textContent = campaign.title;
            campaignSelect.appendChild(option);
          });
        }
      }
    } catch (error) {
      console.error('Error loading campaigns:', error);
    }
  }

  // Setup image preview event listener
  document.addEventListener('DOMContentLoaded', async () => {
    // Load categories and campaigns first
    await Promise.all([loadCategories(), loadCampaigns()]);
    
    const imageInput = document.getElementById('image') as HTMLInputElement;
    if (imageInput) {
      imageInput.addEventListener('change', previewImage);
    }

    // Setup text formatting buttons
    const boldBtn = document.getElementById('boldBtn');
    const italicBtn = document.getElementById('italicBtn');
    const underlineBtn = document.getElementById('underlineBtn');
    const bulletListBtn = document.getElementById('bulletListBtn');
    const numberListBtn = document.getElementById('numberListBtn');

    if (boldBtn) boldBtn.addEventListener('click', () => formatText('bold'));
    if (italicBtn) italicBtn.addEventListener('click', () => formatText('italic'));
    if (underlineBtn) underlineBtn.addEventListener('click', () => formatText('underline'));
    if (bulletListBtn) bulletListBtn.addEventListener('click', () => addList('bullet'));
    if (numberListBtn) numberListBtn.addEventListener('click', () => addList('number'));

    // Setup category selection handling
    const categorySelect = document.getElementById('category') as HTMLSelectElement;
    const customCategoryInput = document.getElementById('customCategoryInput') as HTMLDivElement;
    const customCategoryField = document.getElementById('customCategory') as HTMLInputElement;

    if (categorySelect) {
      categorySelect.addEventListener('change', () => {
        if (categorySelect.value === 'custom') {
          customCategoryInput.classList.remove('hidden');
          customCategoryField.required = true;
          categorySelect.required = false;
        } else {
          customCategoryInput.classList.add('hidden');
          customCategoryField.required = false;
          categorySelect.required = true;
        }
      });
    }
  });

  // Text formatting functions
  function formatText(type: 'bold' | 'italic' | 'underline') {
    const textarea = document.getElementById('content') as HTMLTextAreaElement;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    
    let formattedText = '';
    switch(type) {
      case 'bold':
        formattedText = `**${selectedText}**`;
        break;
      case 'italic':
        formattedText = `*${selectedText}*`;
        break;
      case 'underline':
        formattedText = `_${selectedText}_`;
        break;
    }
    
    textarea.value = textarea.value.substring(0, start) + formattedText + textarea.value.substring(end);
    textarea.focus();
    textarea.setSelectionRange(start + 2, start + 2 + selectedText.length);
  }

  function addList(type: 'bullet' | 'number') {
    const textarea = document.getElementById('content') as HTMLTextAreaElement;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    
    const lines = selectedText.split('\n');
    const formattedLines = lines.map((line, index) => {
      if (type === 'bullet') {
        return `- ${line}`;
      } else {
        return `${index + 1}. ${line}`;
      }
    });
    
    const formattedText = formattedLines.join('\n');
    textarea.value = textarea.value.substring(0, start) + formattedText + textarea.value.substring(end);
  }

  // Fungsi untuk upload gambar ke server
  async function uploadImage(file: File) {
    try {
      const formData = new FormData();
      formData.append('image', file);
      
             const token = localStorage.getItem('token');
      
      const response = await fetch(`${API_URL}/upload`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error('Failed to upload image');
      }
      
             const result = await response.json();
       return result.imageUrl; // Server mengembalikan { imageUrl: "path/to/image" }
    } catch (error) {
      console.error('Error uploading image:', error);
      return null;
    }
  }

  // Form submission
  document.getElementById('createNewsForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      
      // Validate and handle category selection
      let category = formData.get('category') as string;
      if (category === 'custom') {
        const customCategory = formData.get('customCategory') as string;
        if (!customCategory || customCategory.trim() === '') {
          alert('Silakan masukkan nama kategori baru');
          return;
        }
        category = customCategory.trim();
      } else if (!category) {
        alert('Silakan pilih kategori');
        return;
      }
      
      // Upload image if exists
      let imageUrl = null;
             if (imageFile) {
         imageUrl = await uploadImage(imageFile);
        if (!imageUrl) {
          throw new Error('Failed to upload image');
        }
      }

      // Create news
      const newsData = {
        title: formData.get('title'),
        content: formData.get('content'),
        category: category,
        status: formData.get('status'),
        campaignId: formData.get('campaignId') || null,
        ...(imageUrl && { image: imageUrl })
      };
      
      console.log('Sending news data:', newsData);
      
      const response = await fetch(`${API_URL}/news`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(newsData)
      });
      
      if (!response.ok) throw new Error('Failed to create news');
      
      alert('Berita berhasil dibuat!');
      window.location.href = '/admin/news';
      
    } catch (error) {
      console.error('Error creating news:', error);
      alert('Gagal membuat berita. Silakan coba lagi.');
    }
  });

  // Drag and drop handling
  const dropZone = document.querySelector('input[type="file"]')?.parentElement?.parentElement?.parentElement;
  if (dropZone) {
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e: Event) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e: Event) {
      if (dropZone) {
        dropZone.classList.add('border-blue-500', 'bg-blue-50');
      }
    }

    function unhighlight(e: Event) {
      if (dropZone) {
        dropZone.classList.remove('border-blue-500', 'bg-blue-50');
      }
    }

    dropZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e: DragEvent) {
      const dt = e.dataTransfer;
      if (dt?.files) {
        const input = document.querySelector('input[type="file"]') as HTMLInputElement;
        input.files = dt.files;
        // Trigger change event manually
        const changeEvent = new Event('change', { bubbles: true });
        input.dispatchEvent(changeEvent);
      }
    }
  }
</script>
