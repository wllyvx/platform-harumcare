
    <div class="bg-white flex flex-col justify-center items-center border border-gray-500/50 w-full max-w-md rounded-2xl shadow-2xl px-8 py-8">
      <div class="mb-8">
        <h3 class="text-2xl font-semibold text-gray-800">Silahkan Login</h2>
      </div>
      <form id="login-form" class="w-full mx-auto">
        <div class="mb-6">
          <label for="username-input" class="hidden text-gray-600 mb-2">Username atau Email</label>
          <input
            type="text"
            name="username"
            required
            id="username-input"
            class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
            placeholder="Username atau Email"
          />
        </div>
        <div class="mb-8">
          <label for="password-input" class="hidden text-gray-600 mb-2">Password</label>
          <input
            type="password"
            name="password"
            required
            id="password-input"
            class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
            placeholder="Password"
          />
        </div>
        <button
          type="submit"
          class="w-full bg-blue-600 text-white p-3 rounded-full font-medium hover:bg-blue-700 transition-colors duration-300"
        >
          Login
        </button>
      </form>
      <div class="text-center mt-8">
        <p>Belum punya akun? <span class="font-bold text-blue-400"><a href="/signup">Daftar</a></span></p>
      </div>
    </div>

  <script>
    interface LoginData {
      username: string;
      password: string;
    }
  
    // Fungsi login
    async function loginUser(data: LoginData) {
      try {
        const response = await fetch('http://localhost:3000/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        });
        const result = await response.json();
        if (!response.ok) {
          throw new Error(result.error || 'Login failed');
        }
        if (result.token) {
          localStorage.setItem('token', result.token);
          localStorage.setItem('role', result.role);
        }
        return result;
      } catch (error) {
        if (error instanceof Error) {
          console.error('Error logging in:', error.message);
        }
        return null;
      }
    }
  
    window.addEventListener('load', () => {
      const loginForm = document.querySelector('#login-form');
      if (loginForm) {
        console.log('Login form found, adding event listener...');
        loginForm.addEventListener('submit', async (event) => {
          event.preventDefault();
          console.log('Login form submitted');
          
          const usernameInput = document.querySelector('#username-input') as HTMLInputElement;
          const passwordInput = document.querySelector('#password-input') as HTMLInputElement;
          
          if (!usernameInput || !passwordInput) {
            console.error('Required form elements not found');
            return;
          }
  
          const data = { 
            username: usernameInput.value, 
            password: passwordInput.value 
          };
          
          console.log('Sending login request with:', data);
          const result = await loginUser(data);
          console.log('Login response:', result);
          
          if (result && result.token) {
            window.location.href = '/';
            console.log('Login successful, redirecting to home');
          } else {
            alert('Login gagal. Silakan periksa username/email dan password Anda.');
            console.log('Login failed');
          }
        });
      } else {
        console.error('Login form not found in DOM');
      }
    });
  </script>